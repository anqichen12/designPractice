class LRUCache {

    HashMap<Integer, Integer> m = new HashMap<Integer, Integer>();
	HashMap<Integer, Integer> n = new HashMap<Integer, Integer>();
	int count = 0;
	int capacity;
    
    public LRUCache(int capacity) {
        this.capacity = capacity;
    }
    
    public int get(int key) {
        count++;
	        if(m.containsKey(key)) {
	        		n.put(key,count);
	        		return m.get(key);
	        }
	        	return -1;
    }
    
    public void put(int key, int value) {
        count++;
        int min = Integer.MAX_VALUE;
		 	int removeElement = 0;
        if(!m.containsKey(key)){
	        if(m.size()==capacity) {
	        		for(int i:n.keySet()) {
	        			if(n.get(i)<min) {
	        				removeElement = i;
	        				min = n.get(i);
	        			}
	        		}
	        		m.remove(removeElement);
	        		n.remove(removeElement);
	        }
        }
	        m.put(key, value);
	        n.put(key, count);
    }
}
