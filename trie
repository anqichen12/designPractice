class TrieNode {
    public char val;
    public boolean isWord; 
    public HashMap<Character, TrieNode> children = new HashMap<Character, TrieNode>();
    public int count;
    public TrieNode() {}
    TrieNode(char c){
        TrieNode node = new TrieNode();
        node.val = c;
    }
}

public class Trie {
    private TrieNode root;
    
    /** Initialize your data structure here. */
    public Trie() {
        root = new TrieNode();
        root.val = ' ';
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        TrieNode cur = root;
        for(int i=0;i<word.length();i++){
            char c = word.charAt(i);
            TrieNode next = cur.children.get(c);
            if(next==null){
                next = new TrieNode();
                cur.children.put(c,next);
            }
            cur.children.get(c).count ++;
            cur = next;
        }
        cur.isWord = true;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        TrieNode cur = root;
        for(int i=0;i<word.length();i++){
            char c = word.charAt(i);
            TrieNode next = cur.children.get(c);
            if(next==null){
                return false;
            }
            cur = next;
        }
        return cur.isWord;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        TrieNode cur = root;
        for(int i=0;i<prefix.length();i++){
            char c = prefix.charAt(i);
            TrieNode next = cur.children.get(c);
            if(next==null){
                return false;
            }
            cur = next;
        }
        return cur.count>0;
    }
}
